{{- if or (eq .Values.env "dev") (eq .Values.env "qa") }}
apiVersion: batch/v1
kind: Job
metadata:
  name: promote-{{ .Chart.Name }}-{{ .Values.env }}-to-next-{{ randAlphaNum 4 | lower }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 1
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: promote
          image: quay.io/argoproj/argocd:v2.14.19   # âœ… CLI image with argocd binary
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -e
              echo "ðŸ”¹ Promotion hook triggered for {{ .Chart.Name }} ({{ .Values.env }})"

              case "{{ .Values.env }}" in
                dev)
                  NEXT_ENV="qa"
                  ;;
                qa)
                  NEXT_ENV="prod"
                  ;;
                *)
                  echo "No promotion required for {{ .Values.env }}"
                  exit 0
                  ;;
              esac

              NEXT_APP="{{ .Chart.Name }}-${NEXT_ENV}"
              echo "ðŸ”¹ Syncing next environment application: ${NEXT_APP}"

              # âœ… Step 1: Login first
              ARGOCD_ADMIN_PWD="SwlWTFxpGRmUPBN1"   # <-- Hardcoded for testing
              argocd login localhost:8085 \
                --username admin \
                --password "${ARGOCD_ADMIN_PWD}" \
                --grpc-web --insecure

              # âœ… Step 2: Sync the next environment
              argocd app sync ${NEXT_APP} \
                --grpc-web --insecure

              # âœ… Step 3: Wait until it's healthy
              argocd app wait ${NEXT_APP} \
                --health --timeout 300 --grpc-web --insecure

              echo "âœ… ${NEXT_APP} promotion completed successfully!"
{{- end }}
